<?php

/**
 * @file
 * Installation and update routines for culturefeed_udb3.
 */

use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_install().
 */
function culturefeed_udb3_install() {
  $export_location = \Drupal::getContainer()
    ->getParameter('culturefeed_udb3.export_folder_location');

  /** @var \Drupal\Core\File\FileSystem $fileSystem */
  $file_system = \Drupal::service('file_system');

  $file_system->mkdir($export_location);
}

/**
 * Register the event history entity type.
 */
function culturefeed_udb3_update_8001() {
  $entity_manager = \Drupal::entityManager();
  foreach ($entity_manager->getDefinitions() as $entity_type) {
    if ($entity_type->id() == 'event_history') {
      $entity_manager->onEntityTypeCreate($entity_type);
    }
  }
}

/**
 * Register the newly added entity types.
 */
function culturefeed_udb3_update_8002() {

  $entity_manager = \Drupal::entityManager();
  foreach ($entity_manager->getDefinitions() as $entity_type) {
    if ($entity_type->getLabel() == 'Culturefeed udb3 index') {
      $entity_manager->onEntityTypeCreate($entity_type);
    }
  }

}

/**
 * Register the newly added entity types.
 */
function culturefeed_udb3_update_8003() {

  $entity_manager = \Drupal::entityManager();
  foreach ($entity_manager->getDefinitions() as $entity_type) {
    if ($entity_type->getLabel() == 'Culturefeed udb3 place relations') {
      $entity_manager->onEntityTypeCreate($entity_type);
    }
  }

}

/**
 * Add indexes for udb3_index.
 */
function culturefeed_udb3_update_8004() {

  db_add_index('culturefeed_udb3_index', 'type', array('type'));
  db_add_index('culturefeed_udb3_index', 'uid', array('uid'));
  db_add_index('culturefeed_udb3_index', 'zip', array('zip'));

}

/**
 * Convert all existing media objects to type ImageObject.
 */
function culturefeed_udb3_update_8007() {

  // All events.
  $result = db_query('SELECT * FROM {culturefeed_udb3_event_document_repository}');
  foreach ($result as $row) {
    $event = json_decode($row->body);

    if (!empty($event->mediaObject)) {
      foreach ($event->mediaObject as $key => $media_object) {
        $media_ld = array('@type' => 'ImageObject');
        $media_ld += (array) $event->mediaObject[$key];
        $event->mediaObject[$key] = $media_ld;
      }
      db_update('culturefeed_udb3_event_document_repository')
        ->condition('id', $row->id)
        ->fields(array('body' => json_encode($event)))
        ->execute();
    }
  }

  // All places.
  $result = db_query('SELECT * FROM {culturefeed_udb3_place_document_repository}');
  foreach ($result as $row) {
    $place = json_decode($row->body);
    if (!empty($place->mediaObject)) {
      foreach ($place->mediaObject as $key => $media_object) {
        $media_ld = array('@type' => 'ImageObject');
        $media_ld += (array) $place->mediaObject[$key];
        $place->mediaObject[$key] = $media_ld;
      }
      db_update('culturefeed_udb3_place_document_repository')
        ->condition('id', $row->id)
        ->fields(array('body' => json_encode($place)))
        ->execute();
    }
  }
}

/**
 * Register the used labels entity type.
 */
function culturefeed_udb3_update_8008() {
  $entity_manager = \Drupal::entityManager();
  foreach ($entity_manager->getDefinitions() as $entity_type) {
    if ($entity_type->id() == 'used_labels_memory_event_store') {
      $entity_manager->onEntityTypeCreate($entity_type);
    }
  }
}

/**
 * Add new fields to udb3 index.
 */
function culturefeed_udb3_update_8009() {

  $owning_domain_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Owning domain'))
    ->setDescription(t('Owning domain.'));

  $entity_iri_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Entity iri'))
    ->setDescription(t('Entity iri.'));

  $updated_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Updated'))
    ->setDescription(t('Updated.'));

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('owning_domain', 'udb3_index', 'culturefeed_udb3', $owning_domain_storage_definition);
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('entity_iri', 'udb3_index', 'culturefeed_udb3', $entity_iri_storage_definition);
  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('updated', 'udb3_index', 'culturefeed_udb3', $updated_storage_definition);

}

/**
 * Enable the culturefeed_jwt module.
 */
function culturefeed_udb3_update_8010() {
  \Drupal::service('module_installer')->install(array('culturefeed_jwt'), TRUE);
}


/**
 * Enable the cors module.
 */
function culturefeed_udb3_update_8011() {
  \Drupal::service('module_installer')->install(array('cors'), TRUE);
}
